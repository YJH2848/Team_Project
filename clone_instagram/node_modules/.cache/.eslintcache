[{"C:\\instagram\\clone_instagram\\src\\index.js":"1","C:\\instagram\\clone_instagram\\src\\App.js":"2","C:\\instagram\\clone_instagram\\src\\Login_components\\Login.js":"3","C:\\instagram\\clone_instagram\\src\\Main_components\\Real.js":"4","C:\\instagram\\clone_instagram\\src\\context\\AuthProvider.js":"5","C:\\instagram\\clone_instagram\\src\\Sign_components\\Sign.js":"6","C:\\instagram\\clone_instagram\\src\\image_Post\\img.js":"7"},{"size":360,"mtime":1655334019748,"results":"8","hashOfConfig":"9"},{"size":901,"mtime":1655374183555,"results":"10","hashOfConfig":"9"},{"size":6046,"mtime":1656025565856,"results":"11","hashOfConfig":"9"},{"size":6904,"mtime":1655425292765,"results":"12","hashOfConfig":"9"},{"size":354,"mtime":1655334022330,"results":"13","hashOfConfig":"9"},{"size":5959,"mtime":1656025452381,"results":"14","hashOfConfig":"9"},{"size":339,"mtime":1655374189487,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wvsd81",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\instagram\\clone_instagram\\src\\index.js",[],[],"C:\\instagram\\clone_instagram\\src\\App.js",[],[],"C:\\instagram\\clone_instagram\\src\\Login_components\\Login.js",["39","40","41","42","43"],[],"\nimport { useRef, useState, useEffect, useContext } from 'react';\nimport AuthContext from \"../context/AuthProvider\";\nimport axios from 'axios';\n\nconst LOGIN_URL = 'http://127.0.0.1:8000/user/signin/';\n\nconst Login = () => {\n    const { setAuth } = useContext(AuthContext);\n    const userRef = useRef();\n    const errRef = useRef();\n\n    const [email, setEmail] = useState('');\n    const [password, setPwd] = useState('');\n    const [errMsg, setErrMsg] = useState('');\n    const [success, setSuccess] = useState(false);\n\n    useEffect(() => {\n        userRef.current.focus();\n\n    }, [])\n    useEffect(() => {\n        setErrMsg('');\n    }, [email, password])\n\n    // const onImgInputBtnClick = (event: any) => {\n    //     event.preventDefault();\n    //     logoImgInput.current.click();\n    // }\n    const handleSubmit = async (e) => {\n        e.preventDefault(); {/*(e)코드를 작동하지 못하게 하는 메서드*/ }\n\n        try {\n            const response = await axios.post(LOGIN_URL,\n                JSON.stringify({ email, password }), {\n                headers: {\n                    \"Content-Type\": 'application/json',\n                },\n            });\n\n            console.log(JSON.stringify(response?.data));\n            //console.log(JSON.stringify(response));\n            const token = response?.data?.token;\n            const roles = response?.data?.roles;\n            setAuth({ email, password, roles, token });\n            setEmail('');\n            setPwd('');\n            setSuccess(true);\n        } catch (err) {\n            if (!err?.response) {\n                setErrMsg('No Server Response');\n            }\n            else if (err.response?.status === 400) {\n                setErrMsg('Missing Username or Password');\n            }\n            else if (err.response?.status === 401) {\n                setErrMsg('Unauthorized');\n            }\n            else {\n                setErrMsg('Login Failed');\n            }\n            errRef.current.focus();\n        }\n    }\n    return (\n        <>\n            {success ? (\n                <section>\n                    <h1>You are logged in!</h1>\n                    <br />\n                    <p>\n                        <a href=\"#\">Go to Home</a>\n                    </p>\n                </section>\n            ) : (\n                <div className=\"login_container\" >\n                    <section className='login_section'>\n                        <img className=\"smart_img\" src='https://www.instagram.com/static/images/homepage/phones/home-phones.png/1dc085cdb87d.png'></img>\n                        <p ref={errRef} className={errMsg ? \"errmsg\" :\n                            \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n                        <div className='border'>\n                            <img className='login_img' width=\"185\" height=\"70\" src=\"./image/pngegg.png\"></img>\n                            <div className=\"login\">\n                                <form onSubmit={handleSubmit}> {/*form전송을 하기 전 입력된 데이터의 유효성 체크하는 것*/}\n                                    <div className=\"email\">\n                                        <label htmlFor=\"useremail\"></label>\n                                        <input\n                                            className='login_input'\n                                            type=\"text\"\n                                            id=\"useremail\"\n                                            ref={userRef}\n                                            autoComplete=\"off\"\n                                            onChange={(e) => setEmail(e.target.value)}\n                                            value={email}\n                                            required\n                                            placeholder=\"사용자 이름 또는 이메일\"\n                                        />\n                                    </div>\n                                    <div className=\"pwd\">\n                                        <label htmlFor=\"password\"></label>\n                                        <input\n                                            className='login_input'\n                                            type=\"password\"\n                                            id=\"password\"\n                                            ref={userRef}\n                                            autoComplete=\"off\"\n                                            onChange={(e) => setPwd(e.target.value)}\n                                            value={password}\n                                            required\n                                            placeholder=\"비밀번호\"\n                                        />\n                                    </div>\n\n                                    <button className='login_button'>로그인</button>\n                                    <div className='line'>\n                                        또는\n                                    </div>\n                                </form>\n\n                                {/* <div onSubmit={onImgInputBtnClick   }>\n                                        <input\n                                            ref={logoImgInput}\n                                            type='file'\n                                            className='imgInput'\n                                            id='logoImg'\n                                            accept='image/*'\n                                            name='file'\n                                            onChange={onImgChange} \n                                        />\n\n                                    </div> */}\n\n                            </div>\n                        </div>\n                        <div className='noemail'>\n                            계정이 없으신가요?&nbsp;<a href=\"#\" className='join'>가입하기</a>\n                        </div>\n                    </section>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default Login\n","C:\\instagram\\clone_instagram\\src\\Main_components\\Real.js",[],[],"C:\\instagram\\clone_instagram\\src\\context\\AuthProvider.js",[],[],"C:\\instagram\\clone_instagram\\src\\Sign_components\\Sign.js",["44","45","46"],[],"import { Link } from 'react-router-dom';\r\nimport { useRef, useState, useEffect, useContext } from 'react';\r\nimport AuthContext from \"../context/AuthProvider\";\r\nimport axios from 'axios';\r\n\r\nconst LOGIN_URL = 'http://127.0.0.1:8000/user/signin/';\r\n\r\nconst Login = () => {\r\n    const { setAuth } = useContext(AuthContext);\r\n    const userRef = useRef();\r\n    const errRef = useRef();\r\n\r\n\r\n    //이메일 이름 비밀번호\r\n    const [email, setEmail] = useState('');\r\n    const [nickname, setName] = useState('');\r\n    const [password, setPwd] = useState('');\r\n\r\n    //성공실패 여부\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    useEffect(() => {\r\n        userRef.current.focus();\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        setErrMsg('');\r\n    }, [email, nickname, password])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); {/*(e)코드를 작동하지 못하게 하는 메서드*/ }\r\n\r\n        try {\r\n            const response = await axios.post(LOGIN_URL,\r\n                JSON.stringify({ email, nickname, password }), {\r\n                headers: {\r\n                    \"Content-Type\": 'application/json',\r\n                },\r\n            });\r\n            console.log(JSON.stringify(response?.data));\r\n            //console.log(JSON.stringify(response));\r\n            const token = response?.data?.token;\r\n            const roles = response?.data?.roles;\r\n            setAuth({ email, nickname, password, roles, token });\r\n            setEmail('');\r\n            setPwd('');\r\n            setSuccess(true);\r\n        } catch (err) {\r\n            if (!err?.response) {\r\n                setErrMsg('No Server Response');\r\n            }\r\n            else if (err.response?.status === 400) {\r\n                setErrMsg('Missing Username or Password');\r\n            }\r\n            else if (err.response?.status === 401) {\r\n                setErrMsg('Unauthorized');\r\n            }\r\n            else {\r\n                setErrMsg('Login Failed');\r\n            }\r\n            errRef.current.focus();\r\n        }\r\n    }\r\n    return (\r\n        <Link to=\"/sign\">\r\n            {success ? (\r\n                <section>\r\n                    <h1>You are logged in!</h1>\r\n                    <br />\r\n                    <p>\r\n                        <a href=\"#\">Go to Home</a>\r\n                    </p>\r\n                </section>\r\n            ) : (\r\n                <div className=\"sign_container\">\r\n                    <section className='login_section'>\r\n                        <p ref={errRef} className={errMsg ? \"errmsg\" :\r\n                            \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n                        <div className='sign_border'>\r\n                            <img className='sign_img' width=\"185\" height=\"70\" src=\"./image/pngegg.png\"></img>\r\n                            <div className=\"sign\">\r\n                                <form onSubmit={handleSubmit}> {/*form전송을 하기 전 입력된 데이터의 유효성 체크하는 것*/}\r\n                                    <div className=\"email\">\r\n                                        <label htmlFor=\"useremail\"></label>\r\n                                        <input\r\n                                            className='sign_input'\r\n                                            type=\"text\"\r\n                                            id=\"useremail\"\r\n                                            ref={userRef}\r\n                                            autoComplete=\"off\"\r\n                                            onChange={(e) => setEmail(e.target.value)}\r\n                                            value={email}\r\n                                            required\r\n                                            placeholder=\"휴대폰 번호 또는 이메일 주소\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"nickname\">\r\n                                        <label htmlFor=\"nickname\"></label>\r\n                                        <input\r\n                                            className='sign_input'\r\n                                            type=\"nickname\"\r\n                                            id=\"nickname\"\r\n                                            ref={userRef}\r\n                                            autoComplete=\"off\"\r\n                                            onChange={(e) => setName(e.target.value)}\r\n                                            value={nickname}\r\n                                            required\r\n                                            placeholder=\"성명\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"pwd\">\r\n                                        <label htmlFor=\"password\"></label>\r\n                                        <input\r\n                                            className='login_input'\r\n                                            type=\"password\"\r\n                                            id=\"password\"\r\n                                            ref={userRef}\r\n                                            autoComplete=\"off\"\r\n                                            onChange={(e) => setPwd(e.target.value)}\r\n                                            value={password}\r\n                                            required\r\n                                            placeholder=\"비밀번호\"\r\n                                        />\r\n                                    </div>\r\n                                    <button className='sign_button'>Sign In</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            )}\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\instagram\\clone_instagram\\src\\image_Post\\img.js",["47"],[],{"ruleId":"48","severity":1,"message":"49","line":31,"column":29,"nodeType":"50","messageId":"51","endLine":31,"endColumn":58},{"ruleId":"52","severity":1,"message":"53","line":72,"column":25,"nodeType":"54","endLine":72,"endColumn":37},{"ruleId":"55","severity":1,"message":"56","line":78,"column":25,"nodeType":"54","endLine":78,"endColumn":147},{"ruleId":"55","severity":1,"message":"56","line":82,"column":29,"nodeType":"54","endLine":82,"endColumn":105},{"ruleId":"52","severity":1,"message":"53","line":136,"column":45,"nodeType":"54","endLine":136,"endColumn":74},{"ruleId":"48","severity":1,"message":"49","line":32,"column":29,"nodeType":"50","messageId":"51","endLine":32,"endColumn":58},{"ruleId":"52","severity":1,"message":"53","line":72,"column":25,"nodeType":"54","endLine":72,"endColumn":37},{"ruleId":"55","severity":1,"message":"56","line":81,"column":29,"nodeType":"54","endLine":81,"endColumn":104},{"ruleId":"57","severity":1,"message":"58","line":3,"column":7,"nodeType":"59","messageId":"60","endLine":3,"endColumn":10},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'App' is defined but never used.","Identifier","unusedVar"]