[{"C:\\instagram\\clone_instagram\\src\\index.js":"1","C:\\instagram\\clone_instagram\\src\\App.js":"2","C:\\instagram\\clone_instagram\\src\\Login_components\\Login.js":"3","C:\\instagram\\clone_instagram\\src\\Main_components\\Real.js":"4","C:\\instagram\\clone_instagram\\src\\context\\AuthProvider.js":"5","C:\\instagram\\clone_instagram\\src\\api\\axios.js":"6"},{"size":360,"mtime":1655334019748,"results":"7","hashOfConfig":"8"},{"size":649,"mtime":1655286457580,"results":"9","hashOfConfig":"8"},{"size":4649,"mtime":1655344205965,"results":"10","hashOfConfig":"8"},{"size":7080,"mtime":1655287532467,"results":"11","hashOfConfig":"8"},{"size":354,"mtime":1655334022330,"results":"12","hashOfConfig":"8"},{"size":102,"mtime":1655334422108,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wvsd81",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\instagram\\clone_instagram\\src\\index.js",[],[],"C:\\instagram\\clone_instagram\\src\\App.js",[],[],[],"C:\\instagram\\clone_instagram\\src\\Login_components\\Login.js",["34","35","36","37","38"],[],"import { Link } from \"react-router-dom\"\r\nimport { useRef, useState, useEffect, useContext } from 'react';\r\nimport AuthContext from \"../context/AuthProvider\";\r\nimport axios from '../api/axios';\r\nconst LOGIN_URL = 'user/signin/';\r\n\r\nconst Login = () => {\r\n    const { setAuth } = useContext(AuthContext);\r\n    const userRef = useRef();\r\n    const errRef = useRef();\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [pwd, setPwd] = useState('');\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    useEffect(() => {\r\n        userRef.current.focus();\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        setErrMsg('');\r\n    }, [email, pwd])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); {/*(e)코드를 작동하지 못하게 하는 메서드*/}\r\n\r\n        try {\r\n            const response = await axios.post(LOGIN_URL,\r\n                JSON.stringify({ email: email, pwd: pwd })\r\n            );\r\n            console.log(JSON.stringify(response?.data));\r\n            //console.log(JSON.stringify(response));\r\n            const accessToken = response?.data?.accessToken;\r\n            const roles = response?.data?.roles;\r\n            setAuth({ email: email, pwd, roles, accessToken });\r\n            setEmail('');\r\n            setPwd('');\r\n            setSuccess(true);\r\n        } catch (err) {\r\n            if (!err?.response) {\r\n                setErrMsg('No Server Response');\r\n            }\r\n            else if (err.response?.status === 400) {\r\n                setErrMsg('Missing Username or Password');\r\n            }\r\n            else if (err.response?.status === 401) {\r\n                setErrMsg('Unauthorized');\r\n            }\r\n            else {\r\n                setErrMsg('Login Failed');\r\n            }\r\n            errRef.current.focus();\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {success ? (\r\n                <section>\r\n                    <h1>You are logged in!</h1>\r\n                    <br />\r\n                    <p>\r\n                        <a href=\"#\">Go to Home</a>\r\n                    </p>\r\n                </section>\r\n            ) : (\r\n                <div className=\"container\">\r\n                    <section>\r\n                        <p ref={errRef} className={errMsg ? \"errmsg\" :\r\n                            \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n                        <img width=\"185\" height=\"70\" src=\"./image/pngegg.png\"></img>\r\n                        <div className=\"login\">\r\n                            <form onSubmit={handleSubmit}> {/*form전송을 하기 전 입력된 데이터의 유효성 체크하는 것*/}\r\n                                <div className=\"name\">\r\n                                    <label htmlFor=\"useremail\"></label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"useremail\"\r\n                                        ref={userRef}\r\n                                        autoComplete=\"off\"\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                        value={email}\r\n                                        required\r\n                                        placeholder=\"사용자 이름 또는 이메일\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"pwd\">\r\n                                    <label htmlFor=\"password\"></label>\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        ref={userRef}\r\n                                        autoComplete=\"off\"\r\n                                        onChange={(e) => setPwd(e.target.value)}\r\n                                        value={pwd}\r\n                                        required\r\n                                        placeholder=\"비밀번호\"\r\n                                    />\r\n                                </div>\r\n                                <button>Sign In</button>\r\n                            </form>\r\n                        </div>\r\n                        <p>\r\n                            Need an Account?<br />\r\n                            <span className=\"line\">\r\n                                <a href=\"#\">Sign Up\"</a>\r\n                            </span>\r\n                        </p>\r\n                    </section>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n","C:\\instagram\\clone_instagram\\src\\Main_components\\Real.js",[],[],"C:\\instagram\\clone_instagram\\src\\context\\AuthProvider.js",[],[],"C:\\instagram\\clone_instagram\\src\\api\\axios.js",[],[],{"ruleId":"39","severity":1,"message":"40","line":1,"column":10,"nodeType":"41","messageId":"42","endLine":1,"endColumn":14},{"ruleId":"43","severity":1,"message":"44","line":26,"column":29,"nodeType":"45","messageId":"46","endLine":26,"endColumn":57},{"ruleId":"47","severity":1,"message":"48","line":63,"column":25,"nodeType":"49","endLine":63,"endColumn":37},{"ruleId":"50","severity":1,"message":"51","line":71,"column":25,"nodeType":"49","endLine":71,"endColumn":79},{"ruleId":"47","severity":1,"message":"48","line":106,"column":33,"nodeType":"49","endLine":106,"endColumn":45},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]