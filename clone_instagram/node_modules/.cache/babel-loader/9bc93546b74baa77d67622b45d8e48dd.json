{"ast":null,"code":"var _jsxFileName = \"C:\\\\instagram\\\\clone_instagram\\\\src\\\\Sign_components\\\\Sign.js\",\n    _s = $RefreshSig$();\n\n// import { Link } from 'react-router-dom';\n// import { useRef, useState, useEffect, useContext } from 'react';\n// import AuthContext from \"../context/AuthProvider\";\n// import axios from 'axios';\n// const LOGIN_URL = 'http://127.0.0.1:8000/user/signin/';\n// const Login = () => {\n//     const { setAuth } = useContext(AuthContext);\n//     const userRef = useRef();\n//     const errRef = useRef();\n//     //이메일 이름 비밀번호\n//     const [email, setEmail] = useState('');\n//     const [nickname, setName] = useState('');\n//     const [password, setPwd] = useState('');\n//     //성공실패 여부\n//     const [errMsg, setErrMsg] = useState('');\n//     const [success, setSuccess] = useState(false);\n//     useEffect(() => {\n//         userRef.current.focus();\n//     }, [])\n//     useEffect(() => {\n//         setErrMsg('');\n//     }, [email, nickname, password])\n//     const handleSubmit = async (e) => {\n//         e.preventDefault(); {/*(e)코드를 작동하지 못하게 하는 메서드*/ }\n//         try {\n//             const response = await axios.post(LOGIN_URL,\n//                 JSON.stringify({ email, nickname, password }), {\n//                 headers: {\n//                     \"Content-Type\": 'application/json',\n//                 },\n//             });\n//             console.log(JSON.stringify(response?.data));\n//             //console.log(JSON.stringify(response));\n//             const token = response?.data?.token;\n//             const roles = response?.data?.roles;\n//             setAuth({ email, nickname, password, roles, token });\n//             setEmail('');\n//             setPwd('');\n//             setSuccess(true);\n//         } catch (err) {\n//             if (!err?.response) {\n//                 setErrMsg('No Server Response');\n//             }\n//             else if (err.response?.status === 400) {\n//                 setErrMsg('Missing Username or Password');\n//             }\n//             else if (err.response?.status === 401) {\n//                 setErrMsg('Unauthorized');\n//             }\n//             else {\n//                 setErrMsg('Login Failed');\n//             }\n//             errRef.current.focus();\n//         }\n//     }\n//     return (\n//         <Link to=\"/sign\">\n//             {success ? (\n//                 <section>\n//                     <h1>You are logged in!</h1>\n//                     <br />\n//                     <p>\n//                         <a href=\"#\">Go to Home</a>\n//                     </p>\n//                 </section>\n//             ) : (\n//                 <div className=\"sign_container\">\n//                     <section className='login_section'>\n//                         <p ref={errRef} className={errMsg ? \"errmsg\" :\n//                             \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n//                         <div className='sign_border'>\n//                             <img className='sign_img' width=\"185\" height=\"70\" src=\"./image/pngegg.png\"></img>\n//                             <div className=\"sign\">\n//                                 <form onSubmit={handleSubmit}> {/*form전송을 하기 전 입력된 데이터의 유효성 체크하는 것*/}\n//                                     <div className=\"email\">\n//                                         <label htmlFor=\"useremail\"></label>\n//                                         <input\n//                                             className='sign_input'\n//                                             type=\"text\"\n//                                             id=\"useremail\"\n//                                             ref={userRef}\n//                                             autoComplete=\"off\"\n//                                             onChange={(e) => setEmail(e.target.value)}\n//                                             value={email}\n//                                             required\n//                                             placeholder=\"휴대폰 번호 또는 이메일 주소\"\n//                                         />\n//                                     </div>\n//                                     <div className=\"nickname\">\n//                                         <label htmlFor=\"nickname\"></label>\n//                                         <input\n//                                             className='sign_input'\n//                                             type=\"nickname\"\n//                                             id=\"nickname\"\n//                                             ref={userRef}\n//                                             autoComplete=\"off\"\n//                                             onChange={(e) => setName(e.target.value)}\n//                                             value={nickname}\n//                                             required\n//                                             placeholder=\"성명\"\n//                                         />\n//                                     </div>\n//                                     <div className=\"pwd\">\n//                                         <label htmlFor=\"password\"></label>\n//                                         <input\n//                                             className='login_input'\n//                                             type=\"password\"\n//                                             id=\"password\"\n//                                             ref={userRef}\n//                                             autoComplete=\"off\"\n//                                             onChange={(e) => setPwd(e.target.value)}\n//                                             value={password}\n//                                             required\n//                                             placeholder=\"비밀번호\"\n//                                         />\n//                                     </div>\n//                                     <button className='sign_button'>Sign In</button>\n//                                 </form>\n//                             </div>\n//                         </div>\n//                     </section>\n//                 </div>\n//             )}\n//         </Link>\n//     )\n// }\n// export default Login\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RegisterPage(props) {\n  _s();\n\n  // redux의 dispatch\n  const dispatch = useDispatch(); // react hook에서 state 사용\n\n  const [Email, setEmail] = useState('');\n  const [Password, setPassword] = useState('');\n  const [Name, setName] = useState('');\n  const [ConfirmPassword, setConfirmPassword] = useState(''); // handler 함수들\n\n  const onEmailHandler = event => {\n    setEmail(event.currentTarget.value);\n  };\n\n  const onNameHandler = event => {\n    setName(event.currentTarget.value);\n  };\n\n  const onPasswordHandler = event => {\n    setPassword(event.currentTarget.value);\n  };\n\n  const onConfirmPasswordHandler = event => {\n    setConfirmPassword(event.currentTarget.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      onSubmit: onSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: Email,\n        onChange: onEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: Name,\n        onChange: onNameHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: Password,\n        onChange: onPasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Confirm Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: ConfirmPassword,\n        onChange: onConfirmPasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\uD68C\\uC6D0 \\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterPage, \"AnO5EtAcDrkcZsCUQElQ5Gg79Vs=\", false, function () {\n  return [useDispatch];\n});\n\n_c = RegisterPage;\nexport default _c2 = withRouter(RegisterPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RegisterPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useDispatch","withRouter","RegisterPage","props","dispatch","Email","setEmail","Password","setPassword","Name","setName","ConfirmPassword","setConfirmPassword","onEmailHandler","event","currentTarget","value","onNameHandler","onPasswordHandler","onConfirmPasswordHandler","display","justifyContent","alignItems","width","height","flexDirection","onSubmitHandler"],"sources":["C:/instagram/clone_instagram/src/Sign_components/Sign.js"],"sourcesContent":["// import { Link } from 'react-router-dom';\r\n// import { useRef, useState, useEffect, useContext } from 'react';\r\n// import AuthContext from \"../context/AuthProvider\";\r\n// import axios from 'axios';\r\n\r\n// const LOGIN_URL = 'http://127.0.0.1:8000/user/signin/';\r\n\r\n// const Login = () => {\r\n//     const { setAuth } = useContext(AuthContext);\r\n//     const userRef = useRef();\r\n//     const errRef = useRef();\r\n\r\n\r\n//     //이메일 이름 비밀번호\r\n//     const [email, setEmail] = useState('');\r\n//     const [nickname, setName] = useState('');\r\n//     const [password, setPwd] = useState('');\r\n\r\n//     //성공실패 여부\r\n//     const [errMsg, setErrMsg] = useState('');\r\n//     const [success, setSuccess] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         userRef.current.focus();\r\n\r\n//     }, [])\r\n//     useEffect(() => {\r\n//         setErrMsg('');\r\n//     }, [email, nickname, password])\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault(); {/*(e)코드를 작동하지 못하게 하는 메서드*/ }\r\n\r\n//         try {\r\n//             const response = await axios.post(LOGIN_URL,\r\n//                 JSON.stringify({ email, nickname, password }), {\r\n//                 headers: {\r\n//                     \"Content-Type\": 'application/json',\r\n//                 },\r\n//             });\r\n//             console.log(JSON.stringify(response?.data));\r\n//             //console.log(JSON.stringify(response));\r\n//             const token = response?.data?.token;\r\n//             const roles = response?.data?.roles;\r\n//             setAuth({ email, nickname, password, roles, token });\r\n//             setEmail('');\r\n//             setPwd('');\r\n//             setSuccess(true);\r\n//         } catch (err) {\r\n//             if (!err?.response) {\r\n//                 setErrMsg('No Server Response');\r\n//             }\r\n//             else if (err.response?.status === 400) {\r\n//                 setErrMsg('Missing Username or Password');\r\n//             }\r\n//             else if (err.response?.status === 401) {\r\n//                 setErrMsg('Unauthorized');\r\n//             }\r\n//             else {\r\n//                 setErrMsg('Login Failed');\r\n//             }\r\n//             errRef.current.focus();\r\n//         }\r\n//     }\r\n//     return (\r\n//         <Link to=\"/sign\">\r\n//             {success ? (\r\n//                 <section>\r\n//                     <h1>You are logged in!</h1>\r\n//                     <br />\r\n//                     <p>\r\n//                         <a href=\"#\">Go to Home</a>\r\n//                     </p>\r\n//                 </section>\r\n//             ) : (\r\n//                 <div className=\"sign_container\">\r\n//                     <section className='login_section'>\r\n//                         <p ref={errRef} className={errMsg ? \"errmsg\" :\r\n//                             \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n//                         <div className='sign_border'>\r\n//                             <img className='sign_img' width=\"185\" height=\"70\" src=\"./image/pngegg.png\"></img>\r\n//                             <div className=\"sign\">\r\n//                                 <form onSubmit={handleSubmit}> {/*form전송을 하기 전 입력된 데이터의 유효성 체크하는 것*/}\r\n//                                     <div className=\"email\">\r\n//                                         <label htmlFor=\"useremail\"></label>\r\n//                                         <input\r\n//                                             className='sign_input'\r\n//                                             type=\"text\"\r\n//                                             id=\"useremail\"\r\n//                                             ref={userRef}\r\n//                                             autoComplete=\"off\"\r\n//                                             onChange={(e) => setEmail(e.target.value)}\r\n//                                             value={email}\r\n//                                             required\r\n//                                             placeholder=\"휴대폰 번호 또는 이메일 주소\"\r\n//                                         />\r\n//                                     </div>\r\n//                                     <div className=\"nickname\">\r\n//                                         <label htmlFor=\"nickname\"></label>\r\n//                                         <input\r\n//                                             className='sign_input'\r\n//                                             type=\"nickname\"\r\n//                                             id=\"nickname\"\r\n//                                             ref={userRef}\r\n//                                             autoComplete=\"off\"\r\n//                                             onChange={(e) => setName(e.target.value)}\r\n//                                             value={nickname}\r\n//                                             required\r\n//                                             placeholder=\"성명\"\r\n//                                         />\r\n//                                     </div>\r\n//                                     <div className=\"pwd\">\r\n//                                         <label htmlFor=\"password\"></label>\r\n//                                         <input\r\n//                                             className='login_input'\r\n//                                             type=\"password\"\r\n//                                             id=\"password\"\r\n//                                             ref={userRef}\r\n//                                             autoComplete=\"off\"\r\n//                                             onChange={(e) => setPwd(e.target.value)}\r\n//                                             value={password}\r\n//                                             required\r\n//                                             placeholder=\"비밀번호\"\r\n//                                         />\r\n//                                     </div>\r\n//                                     <button className='sign_button'>Sign In</button>\r\n//                                 </form>\r\n//                             </div>\r\n//                         </div>\r\n//                     </section>\r\n//                 </div>\r\n//             )}\r\n//         </Link>\r\n//     )\r\n// }\r\n\r\n// export default Login\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction RegisterPage(props) {\r\n  // redux의 dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // react hook에서 state 사용\r\n  const [Email, setEmail] = useState('');\r\n  const [Password, setPassword] = useState('');\r\n  const [Name, setName] = useState('');\r\n  const [ConfirmPassword, setConfirmPassword] = useState('');\r\n\r\n  // handler 함수들\r\n  const onEmailHandler = (event) => {\r\n    setEmail(event.currentTarget.value);\r\n  };\r\n\r\n  const onNameHandler = (event) => {\r\n    setName(event.currentTarget.value);\r\n  };\r\n\r\n  const onPasswordHandler = (event) => {\r\n    setPassword(event.currentTarget.value);\r\n  };\r\n\r\n  const onConfirmPasswordHandler = (event) => {\r\n    setConfirmPassword(event.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        height: '100vh',\r\n      }}\r\n    >\r\n      <form style={{ display: 'flex', flexDirection: 'column' }} onSubmit={onSubmitHandler}>\r\n        <label>Email</label>\r\n        <input type=\"email\" value={Email} onChange={onEmailHandler} />\r\n        <label>name</label>\r\n        <input type=\"text\" value={Name} onChange={onNameHandler} />\r\n        <label>Password</label>\r\n        <input type=\"password\" value={Password} onChange={onPasswordHandler} />\r\n        <label>Confirm Password</label>\r\n        <input type=\"password\" value={ConfirmPassword} onChange={onConfirmPasswordHandler} />\r\n        <br />\r\n        <button type=\"submit\">회원 가입</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(RegisterPage);"],"mappingsgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;EAAA;;EAC3B;EACA,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAF2B,CAI3B;;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD,CAR2B,CAU3B;;EACA,MAAMc,cAAc,GAAIC,KAAD,IAAW;IAChCR,QAAQ,CAACQ,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAR;EACD,CAFD;;EAIA,MAAMC,aAAa,GAAIH,KAAD,IAAW;IAC/BJ,OAAO,CAACI,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAP;EACD,CAFD;;EAIA,MAAME,iBAAiB,GAAIJ,KAAD,IAAW;IACnCN,WAAW,CAACM,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAX;EACD,CAFD;;EAIA,MAAMG,wBAAwB,GAAIL,KAAD,IAAW;IAC1CF,kBAAkB,CAACE,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAlB;EACD,CAFD;;EAIA,oBACE;IACE,KAAK,EAAE;MACLI,OAAO,EAAE,MADJ;MAELC,cAAc,EAAE,QAFX;MAGLC,UAAU,EAAE,QAHP;MAILC,KAAK,EAAE,MAJF;MAKLC,MAAM,EAAE;IALH,CADT;IAAA,uBASE;MAAM,KAAK,EAAE;QAAEJ,OAAO,EAAE,MAAX;QAAmBK,aAAa,EAAE;MAAlC,CAAb;MAA2D,QAAQ,EAAEC,eAArE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,OAAZ;QAAoB,KAAK,EAAErB,KAA3B;QAAkC,QAAQ,EAAEQ;MAA5C;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF,eAIE;QAAO,IAAI,EAAC,MAAZ;QAAmB,KAAK,EAAEJ,IAA1B;QAAgC,QAAQ,EAAEQ;MAA1C;QAAA;QAAA;QAAA;MAAA,QAJF,eAKE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QALF,eAME;QAAO,IAAI,EAAC,UAAZ;QAAuB,KAAK,EAAEV,QAA9B;QAAwC,QAAQ,EAAEW;MAAlD;QAAA;QAAA;QAAA;MAAA,QANF,eAOE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF,eAQE;QAAO,IAAI,EAAC,UAAZ;QAAuB,KAAK,EAAEP,eAA9B;QAA+C,QAAQ,EAAEQ;MAAzD;QAAA;QAAA;QAAA;MAAA,QARF,eASE;QAAA;QAAA;QAAA;MAAA,QATF,eAUE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVF;IAAA;MAAA;MAAA;MAAA;IAAA;EATF;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD;;GAnDQjB,Y;UAEUF,W;;;KAFVE,Y;AAqDT,qBAAeD,UAAU,CAACC,YAAD,CAAzB"},"metadata":{},"sourceType":"module"}